{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dc8f93e5",
   "metadata": {},
   "source": [
    "# Machine Learning Assignment Report \n",
    "\n",
    "**Contents**\n",
    "1. Dataset overview & EDA highlights  \n",
    "2. Preprocessing summary  \n",
    "3. Model selection & training  \n",
    "4. Evaluation (metrics, confusion matrix, ROC)  \n",
    "5. Interpretation & suggested improvements\n",
    "\n",
    "**Introduction & Problem Statement**\n",
    "Problem Statement: The sinking of the RMS Titanic resulted in the tragic loss of many lives. While chance was a factor, some groups of people were more likely to survive than others. This project aims to answer the question: \"Can we build a model that accurately predicts which passengers survived the Titanic disaster based on their personal attributes?\"\n",
    "\n",
    "**Objectives: The primary objectives of this assignment were:**\n",
    "\n",
    "To perform Exploratory Data Analysis (EDA) to understand data distributions and relationships.\n",
    "\n",
    "To preprocess the data by handling missing values and encoding categorical variables.\n",
    "\n",
    "To build, train, and evaluate two supervised learning models.\n",
    "\n",
    "To interpret the model performance using key metrics and visualizations to determine the most effective algorithm.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53d32414",
   "metadata": {},
   "source": [
    "##  Setup\n",
    "Imports and dataset loading. Paths assume the file was provided at `/mnt/data/SVMtrain.csv`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "164e3e3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch     Fare  \\\n",
       "0            1         0       3    Male  22.0      1      0   7.2500   \n",
       "1            2         1       1  female  38.0      1      0  71.2833   \n",
       "2            3         1       3  female  26.0      0      0   7.9250   \n",
       "3            4         1       1  female  35.0      1      0  53.1000   \n",
       "4            5         0       3    Male  35.0      0      0   8.0500   \n",
       "\n",
       "   Embarked  \n",
       "0         3  \n",
       "1         1  \n",
       "2         3  \n",
       "3         3  \n",
       "4         3  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Import required Python libraries\n",
    "\n",
    "# Numerical operations\n",
    "import numpy as np  \n",
    "\n",
    "# Data manipulation and analysis\n",
    "import pandas as pd  \n",
    "\n",
    "# Data visualization\n",
    "import matplotlib.pyplot as plt  \n",
    "\n",
    "# Import scikit-learn modules for preprocessing, modeling, and evaluation\n",
    "\n",
    "# Splitting data into train/test subsets\n",
    "from sklearn.model_selection import train_test_split  \n",
    "\n",
    "# Helps apply different preprocessing pipelines to numeric vs. categorical columns\n",
    "from sklearn.compose import ColumnTransformer  \n",
    "\n",
    "# Allows chaining preprocessing + model into one pipeline\n",
    "from sklearn.pipeline import Pipeline  \n",
    "\n",
    "# Preprocessing: encode categorical variables (OneHotEncoder) and scale numeric values (StandardScaler)\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler  \n",
    "\n",
    "# Handle missing values by filling with median (numeric) or most frequent (categorical)\n",
    "from sklearn.impute import SimpleImputer  \n",
    "\n",
    "# Evaluation metrics to assess model performance\n",
    "from sklearn.metrics import (\n",
    "    accuracy_score,        # Overall proportion of correct predictions\n",
    "    precision_score,       # Correct positive predictions / all predicted positives\n",
    "    recall_score,          # Correct positive predictions / all actual positives\n",
    "    f1_score,              # Harmonic mean of precision and recall\n",
    "    confusion_matrix,      # Table of true vs. predicted labels\n",
    "    roc_curve,             # ROC curve values\n",
    "    auc,                   # Area Under Curve for ROC\n",
    "    roc_auc_score,         # Direct calculation of ROC AUC\n",
    "    classification_report  # Summary of precision/recall/F1 per class\n",
    ")\n",
    "\n",
    "# ML Algorithms\n",
    "\n",
    "# Logistic Regression: linear classifier for binary/multi-class tasks\n",
    "from sklearn.linear_model import LogisticRegression  \n",
    "\n",
    "# Random Forest: ensemble of decision trees for classification/regression\n",
    "from sklearn.ensemble import RandomForestClassifier  \n",
    "\n",
    "# Path to dataset\n",
    "csv_path = \"C:/Users/mamat/Downloads/SVMtrain.csv\"  \n",
    "\n",
    "# Read CSV file into a Pandas DataFrame\n",
    "df = pd.read_csv(csv_path)  \n",
    "# Quick preview of the dataset\n",
    "# Display the first 5 rows to understand structure, columns, and sample data\n",
    "df.head()  \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7afba194",
   "metadata": {},
   "source": [
    "## 1. Dataset Overview & EDA Highlights\n",
    "- **Shape:** Rows Ã— Columns\n",
    "- **Target Detection:** We guess the label/target column using common names or low-cardinality heuristics.\n",
    "- **Missing Values:** Quick look to determine imputation strategies.\n",
    "- **Feature Types:** Numeric vs. categorical split."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b1e75427",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape: (889, 9)\n",
      "Guessed target column: Survived\n",
      "Numeric features: 7 | Categorical features: 1\n",
      "\n",
      "Missing values (top 10 columns):\n",
      "PassengerId    0\n",
      "Survived       0\n",
      "Pclass         0\n",
      "Sex            0\n",
      "Age            0\n",
      "SibSp          0\n",
      "Parch          0\n",
      "Fare           0\n",
      "Embarked       0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "def guess_target_column(df: pd.DataFrame):\n",
    "    candidates = [c for c in df.columns if c.lower() in {\"target\", \"label\", \"y\", \"outcome\", \"class\", \"survived\"}]  # Look for common target column names\n",
    "    if candidates:\n",
    "        return candidates[0]  # Return first matching column\n",
    "    few_unique = [c for c in df.columns if df[c].nunique(dropna=True) <= 5]  # Find columns with <=5 unique values\n",
    "    if few_unique:\n",
    "        return few_unique[-1]  # Return last column with few unique values\n",
    "    return df.columns[-1]  # Fallback to last column\n",
    "\n",
    "target_col = guess_target_column(df)  # Call function to identify target column\n",
    "feature_cols = [c for c in df.columns if c != target_col]  # All other columns become features\n",
    "\n",
    "numeric_cols = [c for c in feature_cols if pd.api.types.is_numeric_dtype(df[c])]  # Identify numeric feature columns\n",
    "categorical_cols = [c for c in feature_cols if c not in numeric_cols]  # Remaining columns are categorical\n",
    "\n",
    "print('Shape:', df.shape)  # Display dataset dimensions\n",
    "print('Guessed target column:', target_col)  # Show identified target column\n",
    "print('Numeric features:', len(numeric_cols), '| Categorical features:', len(categorical_cols))  # Count feature types\n",
    "print('\\nMissing values (top 10 columns):')  # Header for missing values section\n",
    "print(df.isna().sum().sort_values(ascending=False).head(10))  # Show top 10 columns with most missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "58ac0c6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived\n",
       "0    549\n",
       "1    340\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Target distribution (useful for understanding balance)\n",
    "df[target_col].value_counts(dropna=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4b33081",
   "metadata": {},
   "source": [
    "### Numeric Feature Summary (selected)\n",
    "Basic statistics for quick sanity checks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bb80cbbd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>889.000000</td>\n",
       "      <td>889.000000</td>\n",
       "      <td>889.000000</td>\n",
       "      <td>889.000000</td>\n",
       "      <td>889.000000</td>\n",
       "      <td>889.000000</td>\n",
       "      <td>889.000000</td>\n",
       "      <td>889.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.382452</td>\n",
       "      <td>2.311586</td>\n",
       "      <td>35.686355</td>\n",
       "      <td>0.524184</td>\n",
       "      <td>0.382452</td>\n",
       "      <td>32.096681</td>\n",
       "      <td>2.535433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>256.998173</td>\n",
       "      <td>0.486260</td>\n",
       "      <td>0.834700</td>\n",
       "      <td>17.756733</td>\n",
       "      <td>1.103705</td>\n",
       "      <td>0.806761</td>\n",
       "      <td>49.697504</td>\n",
       "      <td>0.792088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>224.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.895800</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   889.000000  889.000000  889.000000  889.000000  889.000000   \n",
       "mean    446.000000    0.382452    2.311586   35.686355    0.524184   \n",
       "std     256.998173    0.486260    0.834700   17.756733    1.103705   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     224.000000    0.000000    2.000000   22.000000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   32.000000    0.000000   \n",
       "75%     668.000000    1.000000    3.000000   54.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare    Embarked  \n",
       "count  889.000000  889.000000  889.000000  \n",
       "mean     0.382452   32.096681    2.535433  \n",
       "std      0.806761   49.697504    0.792088  \n",
       "min      0.000000    0.000000    1.000000  \n",
       "25%      0.000000    7.895800    2.000000  \n",
       "50%      0.000000   14.454200    3.000000  \n",
       "75%      0.000000   31.000000    3.000000  \n",
       "max      6.000000  512.329200    3.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df.describe()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61a51a9b",
   "metadata": {},
   "source": [
    "## 2. Preprocessing Summary\n",
    "We handle missing values and encode categories appropriately, then scale numeric features. We use an **80/20** train/test split with stratification when classification-like."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "763712f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_classification_target(y: pd.Series):\n",
    "    if not pd.api.types.is_numeric_dtype(y):  # Non-numeric targets are always classification\n",
    "        return True\n",
    "    unique = y.nunique(dropna=True)  # Count unique values excluding NaN\n",
    "    return unique <= max(20, int(0.05 * len(y)))  # Classification if <=20 unique values or <=5% of data length\n",
    "\n",
    "y = df[target_col]  # Extract target variable series\n",
    "X = df[feature_cols]  # Extract feature columns DataFrame\n",
    "classification = is_classification_target(y)  # Determine if problem is classification\n",
    "\n",
    "stratify_arg = y if (classification and y.nunique() > 1) else None  # Stratify only for multi-class classification\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42, stratify=stratify_arg  # 80/20 split with fixed seed\n",
    ")\n",
    "\n",
    "numeric_transformer = Pipeline(steps=[\n",
    "    (\"imputer\", SimpleImputer(strategy=\"median\")),  # Fill missing values with median\n",
    "    (\"scaler\", StandardScaler())  # Standardize features to mean=0, std=1\n",
    "])\n",
    "\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),  # Fill missing values with mode\n",
    "    (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\"))  # Convert categories to binary, ignore unseen\n",
    "])\n",
    "\n",
    "preprocess = ColumnTransformer(\n",
    "    transformers=[\n",
    "        (\"num\", numeric_transformer, numeric_cols),  # Apply numeric pipeline to numeric columns\n",
    "        (\"cat\", categorical_transformer, categorical_cols),  # Apply categorical pipeline to categorical columns\n",
    "    ]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e2a4c19",
   "metadata": {},
   "source": [
    "## 3. Model Selection & Training\n",
    "We compare a **Logistic Regression** (linear baseline) and a **Random Forest** (nonâ€‘linear baseline)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1f1c4b11",
   "metadata": {},
   "outputs": [],
   "source": [
    "logreg = Pipeline(steps=[(\"preprocess\", preprocess), (\"model\", LogisticRegression(max_iter=1000))])  # Create pipeline with preprocessing and logistic regression\n",
    "rf = Pipeline(steps=[(\"preprocess\", preprocess), (\"model\", RandomForestClassifier(random_state=42))])  # Create pipeline with preprocessing and random forest\n",
    "\n",
    "logreg.fit(X_train, y_train)  # Train logistic regression pipeline on training data\n",
    "rf.fit(X_train, y_train)  # Train random forest pipeline on training data\n",
    "\n",
    "y_pred_lr = logreg.predict(X_test)  # Generate predictions from logistic regression on test set\n",
    "y_pred_rf = rf.predict(X_test)  # Generate predictions from random forest on test set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c5c28b4",
   "metadata": {},
   "source": [
    "## 4. Evaluation\n",
    "We report accuracy, precision, recall, F1, and visualize confusion matrices. If binary classification, we also plot ROC curves."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "eb732f68",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression: {'accuracy': 0.8146067415730337, 'precision': 0.7868852459016393, 'recall': 0.7058823529411765, 'f1': 0.7441860465116279}\n",
      "Random Forest: {'accuracy': 0.8089887640449438, 'precision': 0.765625, 'recall': 0.7205882352941176, 'f1': 0.7424242424242424}\n"
     ]
    }
   ],
   "source": [
    "average_type = \"binary\"  # Default to binary classification averaging method\n",
    "if pd.Series(y_test).nunique() > 2:  # Check if target has more than 2 unique classes\n",
    "    average_type = \"macro\"  # Switch to macro averaging for multi-class problems\n",
    "\n",
    "def safe_precision(y_true, y_pred):\n",
    "    from sklearn.metrics import precision_score  # Import inside function (unconventional placement)\n",
    "    return precision_score(y_true, y_pred, average=average_type, zero_division=0)  # Return 0 instead of error for undefined precision\n",
    "\n",
    "def safe_recall(y_true, y_pred):\n",
    "    from sklearn.metrics import recall_score  # Import inside function\n",
    "    return recall_score(y_true, y_pred, average=average_type, zero_division=0)  # Return 0 instead of error for undefined recall\n",
    "\n",
    "def safe_f1(y_true, y_pred):\n",
    "    from sklearn.metrics import f1_score  # Import inside function\n",
    "    return f1_score(y_true, y_pred, average=average_type, zero_division=0)  # Return 0 instead of error for undefined F1\n",
    "\n",
    "metrics_lr = {\n",
    "    \"accuracy\": float(accuracy_score(y_test, y_pred_lr)),  # Convert accuracy to float\n",
    "    \"precision\": float(safe_precision(y_test, y_pred_lr)),  # Calculate precision using safe function\n",
    "    \"recall\": float(safe_recall(y_test, y_pred_lr)),  # Calculate recall using safe function\n",
    "    \"f1\": float(safe_f1(y_test, y_pred_lr)),  # Calculate F1 score using safe function\n",
    "}\n",
    "\n",
    "metrics_rf = {\n",
    "    \"accuracy\": float(accuracy_score(y_test, y_pred_rf)),  # Same metrics for random forest\n",
    "    \"precision\": float(safe_precision(y_test, y_pred_rf)),\n",
    "    \"recall\": float(safe_recall(y_test, y_pred_rf)),\n",
    "    \"f1\": float(safe_f1(y_test, y_pred_rf)),\n",
    "}\n",
    "\n",
    "print(\"Logistic Regression:\", metrics_lr)  # Print logistic regression performance metrics\n",
    "print(\"Random Forest:\", metrics_rf)  # Print random forest performance metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "615da4e5-6c8d-4aaa-9187-35a8c21fca4f",
   "metadata": {},
   "source": [
    "**result**\n",
    "\n",
    "Both models are performing very similarly and are quite good. Logistic Regression has a slight edge overall, performing better on Accuracy and Precision, while Random Forest has a slightly better Recall. The F1 scores are nearly identical.\n",
    "\n",
    "**Metric Breakdown:**\n",
    "\n",
    "**Accuracy (0.815 vs 0.809)**\n",
    "\n",
    "What it means: The percentage of all predictions (correct and incorrect) that were correct.\n",
    "\n",
    "Interpretation: The Logistic Regression model correctly classified 81.5% of the test samples, while the Random Forest was right 80.9% of the time. This is a very small difference, indicating similar overall performance.\n",
    "\n",
    "**Precision (0.787 vs 0.766) - Logistic Regression is better here**\n",
    "\n",
    "What it means: Of all the instances the model predicted as positive, how many were actually positive. It measures qualityâ€”a high precision means you don't get many false positives.\n",
    "\n",
    "Interpretation: When Logistic Regression predicts the positive class, it is correct 78.7% of the time. For Random Forest, it's 76.6%. This means the Logistic Regression model is slightly more reliable when it makes a positive prediction.\n",
    "\n",
    "**Recall (0.706 vs 0.721) - Random Forest is better here**\n",
    "\n",
    "What it means: Of all the instances that are actually positive, how many did the model correctly predict. It measures completenessâ€”a high recall means you don't miss many true positives (low false negative rate).\n",
    "\n",
    "Interpretation: The Random Forest model correctly identified 72.1% of all the actual positive cases in the data, slightly outperforming Logistic Regression, which found 70.6%.\n",
    "\n",
    "**F1-Score (0.744 vs 0.742) - Essentially equal**\n",
    "\n",
    "What it is: The harmonic mean of Precision and Recall. It's a single metric that balances the two, especially useful when you need to find a compromise.\n",
    "\n",
    "Interpretation: The scores are virtually identical. This confirms that the trade-off between Precision and Recall is very similar for both models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e8696718",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "from sklearn.metrics import confusion_matrix  # Import confusion matrix function\n",
    "\n",
    "cm_lr = confusion_matrix(y_test, y_pred_lr)  # Compute confusion matrix for logistic regression predictions\n",
    "cm_rf = confusion_matrix(y_test, y_pred_rf)  # Compute confusion matrix for random forest predictions\n",
    "classes = [str(c) for c in sorted(pd.unique(y_test))]  # Get sorted unique class labels as strings\n",
    "\n",
    "def plot_confusion_matrix(cm, classes, title):\n",
    "    plt.figure()  # Create a new figure\n",
    "    plt.imshow(cm, interpolation='nearest')  # Display confusion matrix as image with nearest interpolation\n",
    "    plt.title(title)  # Set the plot title\n",
    "    plt.colorbar()  # Add colorbar to show scale\n",
    "    tick_marks = np.arange(len(classes))  # Create array of tick positions\n",
    "    plt.xticks(tick_marks, classes, rotation=45, ha='right')  # Set x-axis ticks with rotated labels\n",
    "    plt.yticks(tick_marks, classes)  # Set y-axis ticks\n",
    "    for i in range(cm.shape[0]):  # Loop through rows\n",
    "        for j in range(cm.shape[1]):  # Loop through columns\n",
    "            plt.text(j, i, format(cm[i, j], 'd'), horizontalalignment=\"center\")  # Add text annotation for each cell\n",
    "    plt.ylabel('True label')  # Label y-axis\n",
    "    plt.xlabel('Predicted label')  # Label x-axis\n",
    "    plt.tight_layout()  # Adjust layout to prevent clipping\n",
    "\n",
    "plot_confusion_matrix(cm_lr, classes, \"Confusion Matrix - Logistic Regression\")  # Plot LR confusion matrix\n",
    "plot_confusion_matrix(cm_rf, classes, \"Confusion Matrix - Random Forest\")  # Plot RF confusion matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6689bf42-8923-499f-9950-d61d0c2c3c5a",
   "metadata": {},
   "source": [
    "**Analysis of Confusion Matrices**\n",
    "The confusion matrices provide a detailed breakdown of each model's predictions at the default classification threshold.\n",
    "\n",
    "**Logistic Regression Performance:**\n",
    "\n",
    "The model demonstrates high accuracy, correctly classifying the vast majority of instances.\n",
    "\n",
    "Its strength lies in its high precision, evidenced by a lower count of False Positives (FP) compared to the Random Forest. This indicates it is more reliable when it predicts the positive class, resulting in fewer false alarms.\n",
    "\n",
    "This comes with a trade-off of a slightly higher number of False Negatives (FN), meaning it misses a few more actual positive cases than the Random Forest model.\n",
    "\n",
    "**Random Forest Performance:**\n",
    "\n",
    "The Random Forest model also achieves high accuracy, with a correct prediction count very close to that of Logistic Regression.\n",
    "\n",
    "Its key strength is its slightly higher recall, evidenced by a lower count of False Negatives (FN). This indicates it is better at identifying all relevant positive cases, minimizing missed detections.\n",
    "\n",
    "This strength is offset by a higher number of False Positives (FP), meaning it is more prone to raising false alarms than the Logistic Regression model.\n",
    "\n",
    "**Conclusion from Matrices: The choice between models depends on the business objective: Logistic Regression is preferable for minimizing false alarms , while Random Forest is better for minimizing missed detections.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c8938928",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ROC (if binary)\n",
    "if pd.Series(y_test).nunique() == 2:  # Check if binary classification problem\n",
    "    plt.figure()  # Create new figure for ROC plot\n",
    "    try:\n",
    "        y_prob_lr = logreg.predict_proba(X_test)[:, 1]  # Get positive class probabilities from logistic regression\n",
    "        fpr_lr, tpr_lr, _ = roc_curve(y_test, y_prob_lr)  # Calculate ROC curve points\n",
    "        auc_lr = auc(fpr_lr, tpr_lr)  # Calculate AUC score\n",
    "        plt.plot(fpr_lr, tpr_lr, label=f\"LogReg (AUC={auc_lr:.3f})\")  # Plot ROC curve with AUC label\n",
    "    except Exception:  # Handle potential errors in predict_proba\n",
    "        pass  # Skip logistic regression if probability prediction fails\n",
    "    \n",
    "    try:\n",
    "        y_prob_rf = rf.predict_proba(X_test)[:, 1]  # Get positive class probabilities from random forest\n",
    "        fpr_rf, tpr_rf, _ = roc_curve(y_test, y_prob_rf)  # Calculate ROC curve points\n",
    "        auc_rf = auc(fpr_rf, tpr_rf)  # Calculate AUC score\n",
    "        plt.plot(fpr_rf, tpr_rf, label=f\"RandomForest (AUC={auc_rf:.3f})\")  # Plot ROC curve with AUC label\n",
    "    except Exception:  # Handle potential errors in predict_proba\n",
    "        pass  # Skip random forest if probability prediction fails\n",
    "    \n",
    "    plt.plot([0, 1], [0, 1], linestyle=\"--\")  # Plot diagonal line representing random classifier\n",
    "    plt.xlabel(\"False Positive Rate\")  # Label x-axis\n",
    "    plt.ylabel(\"True Positive Rate\")  # Label y-axis\n",
    "    plt.title(\"ROC Curves\")  # Set plot title\n",
    "    plt.legend(loc=\"lower right\")  # Add legend in bottom right corner"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2040c9aa",
   "metadata": {},
   "source": [
    "The Receiver Operating Characteristic (ROC) curves evaluate model performance across all possible classification thresholds, with the Area Under the Curve (AUC) providing a single measure of separability.\n",
    "\n",
    "**Logistic Regression (AUC = 0.860):**\n",
    "\n",
    "The AUC score of 0.860 indicates an excellent ability to discriminate between the positive and negative classes. This means the model's predicted probabilities are highly reliable.\n",
    "\n",
    "The curve's strong bend towards the top-left corner of the graph confirms that the model can achieve a high True Positive Rate while maintaining a low False Positive Rate.\n",
    "\n",
    "**Random Forest (AUC = 0.822):**\n",
    "\n",
    "The AUC score of 0.822 also indicates a very good to excellent level of performance in distinguishing between the two classes.\n",
    "\n",
    "While slightly lower than the Logistic Regression model, this score is still significantly better than a random classifier (AUC=0.5).\n",
    "\n",
    "Conclusion from ROC Curves: The AUC values confirm that both models are highly effective. The higher AUC for Logistic Regression suggests it has a marginally superior overall ability to rank instances correctly by their probability of belonging to the positive class."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cebe4b1-8be6-4cf8-adeb-fc29559fc72d",
   "metadata": {},
   "source": [
    "**Conclusion:** The project successfully built predictive models for passenger survival. The Logistic Regression model is recommended as the final model due to its slightly higher overall accuracy, superior AUC score, and greater precision. Its interpretability is also a significant advantage for understanding the factors that contributed to survival.\n",
    "\n",
    "**Discussion:** The results align with historical accounts: survival was heavily influenced by socio-economic status (Pclass) and the \"women and children first\" protocol (Sex, Age). The model's performance confirms that these patterns are strong and learnable by ML algorithms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9b90276-b5ae-4e06-bb5e-7ccef49c518c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
